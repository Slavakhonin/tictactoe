import java.util.Scanner; // Importing the Scanner class to get user input
import java.util.Random;

public class Main {

    // This method prints the current state of the Tic Tac Toe board
    public static void print_board(char[] board) {
        // Display the board in a 3x3 grid
        System.out.println("[" + board[0] + "][" + board[1] + "][" + board[2] + "]");
        System.out.println("[" + board[3] + "][" + board[4] + "][" + board[5] + "]");
        System.out.println("[" + board[6] + "][" + board[7] + "][" + board[8] + "]");
    }

    // This method checks if the current player has won the game
    public static boolean check_winner(char[] board, char player) {
        // A player wins if they occupy 3 positions in a row, column, or diagonal
        return (board[0] == player && board[1] == player && board[2] == player) || // Top row
                (board[3] == player && board[4] == player && board[5] == player) || // Middle row
                (board[6] == player && board[7] == player && board[8] == player) || // Bottom row
                (board[0] == player && board[3] == player && board[6] == player) || // Left column
                (board[1] == player && board[4] == player && board[7] == player) || // Middle column
                (board[2] == player && board[5] == player && board[8] == player) || // Right column
                (board[0] == player && board[4] == player && board[8] == player) || // Diagonal top-left to bottom-right
                (board[2] == player && board[4] == player && board[6] == player);   // Diagonal top-right to bottom-left
    }

    // This method checks if the game is a draw (no more moves left)
    public static boolean is_draw(char[] board) {
        // If all positions are occupied and no winner, it's a draw
        for (char c : board) {
            if (c != 'X' && c != 'O') {
                return false; // Still moves available
            }
        }
        return true; // No moves left
    }

    public static int get_computer_move(char[] board) {
        Random random = new Random();
        int move;
        do {
            move = random.nextInt(9); // Random move between 0 and 8
        } while (board[move] == 'X' || board[move] == 'O'); // Ensure the move is valid
        return move;
    }

    public static void main(String[] args) {
        // The board is represented by a character array with 9 positions
        char[] board = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};

        // Players will use 'X' and 'O' as their markers
        char playerX = 'X';
        char playerO = 'O';

        // Display a welcome message
        System.out.println("Welcome to Tic Tac Toe!");

        // Set up a scanner to get input from players
        Scanner userInput = new Scanner(System.in);

        System.out.println("Do you want to play against the computer? (yes/no)");
        boolean singlePlayer = userInput.nextLine().equalsIgnoreCase("yes");

        String player1, player2;
        if (singlePlayer) {
            System.out.println("Player 1, enter your name: ");
            player1 = userInput.nextLine();
            player2 = "Computer";
            System.out.println("Welcome, " + player1 + "! You will play against the Computer.");
        } else {
            // Get player names
            System.out.println("Player 1, enter your name: ");
            player1 = userInput.nextLine(); // Read Player 1's name
            System.out.println("Welcome, " + player1 + "!");

            System.out.println("Player 2, enter your name: ");
            player2 = userInput.nextLine(); // Read Player 2's name
            System.out.println("Welcome, " + player2 + "!");
        }
        // Start the game
        boolean gameOn = true; // This variable keeps the game running
        char currentPlayer = playerX; // Player X always starts first
        String currentPlayerName = player1; // Player 1 goes first

        // The game continues until someone wins or it's a draw
        while (gameOn) {
            // Show the current board to the players
            print_board(board);

            int move;
            if (singlePlayer && currentPlayerName.equals("Computer")) {
                System.out.println("Computer is making its move...");
                move = get_computer_move(board);
            } else {

                // Ask the current player to make a move
                System.out.println(currentPlayerName + "'s turn (" + currentPlayer + "). Enter a position (1-9):");

                // Keep asking for input until a valid move is made
                while (true) {
                    try {
                        move = Integer.parseInt(userInput.nextLine()) - 1; // Convert input to a board index
                        if (move < 0 || move >= 9 || board[move] == 'X' || board[move] == 'O') {
                            System.out.println("Invalid move! Try again."); // If the move is invalid, ask again
                        } else {
                            break; // Move is valid
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Please enter a valid number between 1 and 9."); // Input must be a number
                    }
                }
            }
            // Place the player's marker on the board
            board[move] = currentPlayer;

            // Check if the current player has won
            if (check_winner(board, currentPlayer)) {
                print_board(board); // Show the final board
                System.out.println("Congratulations " + currentPlayerName + "! You have won!");
                gameOn = false; // End the game
            }
            // Check if the game is a draw
            else if (is_draw(board)) {
                print_board(board); // Show the final board
                System.out.println("It's a draw!"); // No winner
                gameOn = false; // End the game
            }
            // Switch to the next player
            else {
                currentPlayer = (currentPlayer == playerX) ? playerO : playerX; // Switch marker
                currentPlayerName = (currentPlayerName.equals(player1)) ? player2 : player1; // Switch name
            }
        }

        // Game is over
        System.out.println("Game over. Thanks for playing!");
        userInput.close(); // Close the scanner
    }
}
